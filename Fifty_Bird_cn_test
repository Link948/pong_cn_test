-- push是一个库，允许我们在虚拟分辨率上绘制我们的游戏，而不是在窗口的实际大小上绘制；用于提供更具复古美学的外观
--
-- https://github.com/Ulydev/push
push = require 'push'

-- 我们正在使用的“Class”库将允许我们将游戏中的任何东西表示为代码，而不是跟踪许多不同的变量和方法
--
-- https://github.com/vrld/hump/blob/master/class.lua
Class = require 'class'

-- 一个基本的StateMachine类，它将允许我们平滑地在游戏状态之间进行转换，并避免在一个文件中编写庞大的代码块
require 'StateMachine'

require 'states/BaseState'
require 'states/CountdownState'
require 'states/PlayState'
require 'states/ScoreState'
require 'states/TitleScreenState'

require 'Bird'
require 'Pipe'
require 'PipePair'

-- 物理屏幕尺寸
WINDOW_WIDTH = 1280
WINDOW_HEIGHT = 720

-- 虚拟分辨率尺寸
VIRTUAL_WIDTH = 512
VIRTUAL_HEIGHT = 288

local background = love.graphics.newImage('background.png')
local backgroundScroll = 0

local ground = love.graphics.newImage('ground.png')
local groundScroll = 0

local BACKGROUND_SCROLL_SPEED = 30
local GROUND_SCROLL_SPEED = 60

local BACKGROUND_LOOPING_POINT = 413

-- 全局变量，我们可以用它来滚动地图
scrolling = true

function love.load()
    -- 初始化我们的最近邻过滤器
    love.graphics.setDefaultFilter('nearest', 'nearest')
    
    -- 种子随机数生成器
    math.randomseed(os.time())

    -- 应用窗口标题
    love.window.setTitle('Fifty Bird')

    -- 初始化我们漂亮的复古文本字体
    smallFont = love.graphics.newFont('font.ttf', 8)
    mediumFont = love.graphics.newFont('flappy.ttf', 14)
    flappyFont = love.graphics.newFont('flappy.ttf', 28)
    hugeFont = love.graphics.newFont('flappy.ttf', 56)
    love.graphics.setFont(flappyFont)

    -- 初始化我们的声音表
    sounds = {
        ['jump'] = love.audio.newSource('jump.wav', 'static'),
        ['explosion'] = love.audio.newSource('explosion.wav', 'static'),
        ['hurt'] = love.audio.newSource('hurt.wav', 'static'),
        ['score'] = love.audio.newSource('score.wav', 'static'),

        -- https://freesound.org/people/xsgianni/sounds/388079/
        ['music'] = love.audio.newSource('marios_way.mp3', 'static')
    }

    -- 启动音乐
    sounds['music']:setLooping(true)
    sounds['music']:play()

    -- 初始化虚拟分辨率
    push:setupScreen(VIRTUAL_WIDTH, VIRTUAL_HEIGHT, WINDOW_WIDTH, WINDOW_HEIGHT, {
        vsync = true,
        fullscreen = false,
        resizable = true
    })

    -- 使用所有状态返回函数初始化状态机
    gStateMachine = StateMachine {
        ['title'] = function() return TitleScreenState() end,
        ['countdown'] = function() return CountdownState() end,
        ['play'] = function() return PlayState() end,
        ['score'] = function() return ScoreState() end
    }
    gStateMachine:change('title')

    -- 初始化输入表
    love.keyboard.keysPressed = {}
end

function love.resize(w, h)
    push:resize(w, h)
end

function love.keypressed(key)
    -- 将按下的键添加到我们的键表中
    love.keyboard.keysPressed[key] = true

    if key == 'escape' then
        love.event.quit()
    end
end

function love.keyboard.wasPressed(key)
    if love.keyboard.keysPressed[key] then
        return true
    else
        return false
    end
end

function love.update(dt)
    if scrolling then
        backgroundScroll = (backgroundScroll + BACKGROUND_SCROLL_SPEED * dt) % BACKGROUND_LOOPING_POINT
        groundScroll = (groundScroll + GROUND_SCROLL_SPEED * dt) % VIRTUAL_WIDTH
    end

    gStateMachine:update(dt)

    love.keyboard.keysPressed = {}
end

function love.draw()
    push:start()
    
    love.graphics.draw(background, -backgroundScroll, 0)
    gStateMachine:render()
    love.graphics.draw(ground, -groundScroll, VIRTUAL_HEIGHT - 16)
    
    push:finish()
end